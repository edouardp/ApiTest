// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestApi.BddTests
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TestTheJobsControllerFeature : object, Xunit.IClassFixture<TestTheJobsControllerFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "Test the Jobs Controller", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Jobs.feature"
#line hidden
        
        public TestTheJobsControllerFeature(TestTheJobsControllerFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new job")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the Jobs Controller")]
        [Xunit.TraitAttribute("Description", "Create a new job")]
        public async System.Threading.Tasks.Task CreateANewJob()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Create a new job", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
    await testRunner.GivenAsync("the following request", "POST /api/job HTTP/1.1\nContent-type: application/json; charset=utf-8\nAccept: appl" +
                        "ication/json\n\n{\n    \"JobType\": \"Upgrade\"\n}", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
    await testRunner.ThenAsync("the API returns the following response", "HTTP/1.1 201 Created\nContent-type: application/json; charset=utf-8\n\n{\n    \"jobId\"" +
                        ": [[JOBID]]\n}", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 26
    await testRunner.GivenAsync("the following request", "GET /api/job/status/{{JOBID}} HTTP/1.1\nAccept: application/json", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 32
    await testRunner.ThenAsync("the API returns the following response", "HTTP/1.1 200 OK\nContent-type: application/json; charset=utf-8\n\n{\n    \"jobId\": \"{{" +
                        "JOBID}}\",\n    \"status\": \"Pending\"\n}", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invalid input for Create Job")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the Jobs Controller")]
        [Xunit.TraitAttribute("Description", "Invalid input for Create Job")]
        public async System.Threading.Tasks.Task InvalidInputForCreateJob()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Invalid input for Create Job", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 46
    await testRunner.GivenAsync("the following request", "POST /api/job HTTP/1.1\nContent-type: application/json; charset=utf-8\nAccept: appl" +
                        "ication/json", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
    await testRunner.ThenAsync("the API returns the following response", @"HTTP/1.1 400 BadRequest
Content-type: application/problem+json; charset=utf-8

{
  ""type"": ""https://tools.ietf.org/html/rfc9110#section-15.5.1"",
  ""title"": ""One or more validation errors occurred."",
  ""status"": 400,
  ""errors"": {
    ""request"": [""The request field is required.""]
  }
}", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invalid Job Type for Create Job")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the Jobs Controller")]
        [Xunit.TraitAttribute("Description", "Invalid Job Type for Create Job")]
        public async System.Threading.Tasks.Task InvalidJobTypeForCreateJob()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Invalid Job Type for Create Job", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 70
    await testRunner.GivenAsync("the following request", "POST /api/job HTTP/1.1\nContent-type: application/json; charset=utf-8\nAccept: appl" +
                        "ication/json\n\n{\n    \"JobType\": \"\"\n}", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 81
    await testRunner.ThenAsync("the API returns the following response", "HTTP/1.1 400 BadRequest\nContent-type: application/problem+json; charset=utf-8\n\n{\n" +
                        "  \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n  \"title\": \"Job " +
                        "Type Invalid\",\n  \"status\": 400,\n  \"detail\": \"The Job Type \'\' is invalid.\"\n}", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get the status for a job that doesn\'t exist")]
        [Xunit.TraitAttribute("FeatureTitle", "Test the Jobs Controller")]
        [Xunit.TraitAttribute("Description", "Get the status for a job that doesn\'t exist")]
        public async System.Threading.Tasks.Task GetTheStatusForAJobThatDoesntExist()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Get the status for a job that doesn\'t exist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 97
    await testRunner.GivenAsync("the following request", "GET /api/job/status/_DOES_NOT_EXIST_ HTTP/1.1\nAccept: application/json", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 103
    await testRunner.ThenAsync("the API returns the following response", "HTTP/1.1 404 NotFound\nContent-type: application/problem+json; charset=utf-8\n\n{\n  " +
                        "\"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.5\",\n  \"title\": \"Job No" +
                        "t Found\",\n  \"detail\": \"The job with ID _DOES_NOT_EXIST_ was not found.\",\n  \"stat" +
                        "us\": 404\n}", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await TestTheJobsControllerFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await TestTheJobsControllerFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
